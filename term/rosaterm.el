;;; rosaterm.el --- terminal support code for rosaterm
;; Copyright (C) 2011-2012 K. Murase.

(load "term/xterm")

;;; This is for GNU Emacs 21
(if (= 21 emacs-major-version)
    (load "term/xterm-256color"))

;; reference: http://www.xvx.ca/~awg/emacs-colors-howto.txt
;;; This is for GNU Emacs 22
(defvar rosaterm-function-map
  (let* ((map (make-sparse-keymap))
         (shift    33554432)
         (control  67108864)
         (meta    134217728)
         ;; (kf+ACMS (lambda (name number tail)
         ;;            (define-key map (concat "\M-[" number tail)        (vector (make-symbol name)))
         ;;            (define-key map (concat "\M-[" number ";2" tail)   (vector (make-symbol (concat "S-" name))))
         ;;            (define-key map (concat "\M-[" number ";3" tail)   (vector (make-symbol (concat "A-" name))))
         ;;            (define-key map (concat "\M-[" number ";4" tail)   (vector (make-symbol (concat "A-S-" name))))
         ;;            (define-key map (concat "\M-[" number ";5" tail)   (vector (make-symbol (concat "C-" name))))
         ;;            (define-key map (concat "\M-[" number ";6" tail)   (vector (make-symbol (concat "C-S-" name))))
         ;;            (define-key map (concat "\M-[" number ";7" tail)   (vector (make-symbol (concat "A-C-" name))))
         ;;            (define-key map (concat "\M-[" number ";8" tail)   (vector (make-symbol (concat "A-C-S-" name))))
         ;;            (define-key map (concat "\M-[" number tail)      (vector (make-symbol (concat "M-" name))))
         ;;            (define-key map (concat "\M-[" number ";2" tail) (vector (make-symbol (concat "M-S-" name))))
         ;;            (define-key map (concat "\M-[" number ";3" tail) (vector (make-symbol (concat "A-M-" name))))
         ;;            (define-key map (concat "\M-[" number ";4" tail) (vector (make-symbol (concat "A-M-S-" name))))
         ;;            (define-key map (concat "\M-[" number ";5" tail) (vector (make-symbol (concat "C-M-" name))))
         ;;            (define-key map (concat "\M-[" number ";6" tail) (vector (make-symbol (concat "C-M-S-" name))))
         ;;            (define-key map (concat "\M-[" number ";7" tail) (vector (make-symbol (concat "A-C-M-" name))))
         ;;            (define-key map (concat "\M-[" number ";8" tail) (vector (make-symbol (concat "A-C-M-S-" name))))
         ;;            ))
         (kf+CMS (lambda (name number tail)
                   (define-key map (concat "\e[" number tail)        (vector (make-symbol name)))
                   (define-key map (concat "\e[" number ";2" tail)   (vector (make-symbol (concat "S-" name))))
                   (define-key map (concat "\e[" number ";5" tail)   (vector (make-symbol (concat "C-" name))))
                   (define-key map (concat "\e[" number ";6" tail)   (vector (make-symbol (concat "C-S-" name))))
                   (define-key map (concat "\e\e[" number tail)      (vector (make-symbol (concat "M-" name))))
                   (define-key map (concat "\e\e[" number ";2" tail) (vector (make-symbol (concat "M-S-" name))))
                   (define-key map (concat "\e\e[" number ";5" tail) (vector (make-symbol (concat "C-M-" name))))
                   (define-key map (concat "\e\e[" number ";6" tail) (vector (make-symbol (concat "C-M-S-" name))))
                   ))
         (kc+M/C (lambda (ch number)
                   (define-key map (concat "\e[" number ";5^")   (vector (+ control ch)))      ;; old
                   (define-key map (concat "\e\e[" number ";5^") (vector (+ control meta ch))) ;; old
                   (define-key map (concat "\e[27;5;" number "~")   (vector (+ control ch)))
                   (define-key map (concat "\e\e[27;5;" number "~") (vector (+ control meta ch)))
                   ))
         (kc+M/CS (lambda (ch number)
                    (let ((ch+C (if (and (<= ?a ch) (<= ch ?z))
                                    (logand ch 31) (+ control ch))))
                      (define-key map (concat "\e[" number ";6^")   (vector (+ shift ch+C)))      ;; old
                      (define-key map (concat "\e\e[" number ";6^") (vector (+ shift meta ch+C))) ;; old
                      (define-key map (concat "\e[27;6;" number "~")   (vector (+ shift ch+C)))
                      (define-key map (concat "\e\e[27;6;" number "~") (vector (+ shift meta ch+C)))
                      )))
         )


    (define-key map "\e[A" [up])
    (define-key map "\e[B" [down])
    (define-key map "\e[C" [right])
    (define-key map "\e[D" [left])

    (funcall kf+CMS "up"     "1" "A")
    (funcall kf+CMS "down"   "1" "B")
    (funcall kf+CMS "right"  "1" "C")
    (funcall kf+CMS "left"   "1" "D")
    ;; (funcall kf+CMS "begin"   "1" "E")
    (funcall kf+CMS "home"   "1" "~")
    (funcall kf+CMS "insert" "2" "~")
    (funcall kf+CMS "delete" "3" "~")
    (funcall kf+CMS "end"    "4" "~")
    (funcall kf+CMS "prior"  "5" "~")
    (funcall kf+CMS "next"   "6" "~")
    ;; (funcall kf+CMS "hoge"   "7" "~")
    ;; (funcall kf+CMS "koge"   "8" "~")
    ;; (funcall kf+CMS "toge"   "9" "~")

    ;; C-<deleteline>    C-DelLn   == A-C-delete
    ;; C-M-<deleteline>  C-M-DelLn == A-C-M-delete

    (funcall kf+CMS "f1"  "11" "~")
    (funcall kf+CMS "f2"  "12" "~")
    (funcall kf+CMS "f3"  "13" "~")
    (funcall kf+CMS "f4"  "14" "~")
    (funcall kf+CMS "f5"  "15" "~")
    (funcall kf+CMS "f6"  "17" "~")
    (funcall kf+CMS "f7"  "18" "~")
    (funcall kf+CMS "f8"  "19" "~")
    (funcall kf+CMS "f9"  "20" "~")
    (funcall kf+CMS "f10" "21" "~")
    (funcall kf+CMS "f11" "23" "~")
    (funcall kf+CMS "f12" "24" "~")
    (funcall kf+CMS "f13" "25" "~")
    (funcall kf+CMS "f14" "26" "~")
    (funcall kf+CMS "f15" "28" "~")
    (funcall kf+CMS "f16" "29" "~")
    (funcall kf+CMS "f17" "30" "~")
    (funcall kf+CMS "f18" "31" "~")
    (funcall kf+CMS "f19" "32" "~")
    (funcall kf+CMS "f20" "33" "~")
    (funcall kf+CMS "f21" "23" "$")
    (funcall kf+CMS "f22" "24" "$")
    (funcall kf+CMS "f23" "25" "$")
    (funcall kf+CMS "f24" "26" "$")

    (funcall kc+M/C ?!  "33")
    (funcall kc+M/C ?\" "34")
    (funcall kc+M/C ?#  "35")
    (funcall kc+M/C ?$  "36")
    (funcall kc+M/C ?%  "37")
    (funcall kc+M/C ?&  "38")
    (funcall kc+M/C ?'  "39")
    (funcall kc+M/C ?\( "40")
    (funcall kc+M/C ?\) "41")
    (funcall kc+M/C ?\* "42")
    (funcall kc+M/C ?+  "43")
    (funcall kc+M/C ?,  "44")
    (funcall kc+M/C ?-  "45")
    (funcall kc+M/C ?.  "46")
    (funcall kc+M/C ?/  "47")
    (funcall kc+M/C ?0  "48")
    (funcall kc+M/C ?1  "49")
    (funcall kc+M/C ?2  "50")
    (funcall kc+M/C ?3  "51")
    (funcall kc+M/C ?4  "52")
    (funcall kc+M/C ?5  "53")
    (funcall kc+M/C ?6  "54")
    (funcall kc+M/C ?7  "55")
    (funcall kc+M/C ?8  "56")
    (funcall kc+M/C ?9  "57")
    (funcall kc+M/C ?:  "58")
    (funcall kc+M/C ?\; "59")
    (funcall kc+M/C ?<  "60")
    (funcall kc+M/C ?=  "61")
    (funcall kc+M/C ?>  "62")
    (funcall kc+M/C ??  "63")

    (funcall kc+M/C  ?`  "96")
    (funcall kc+M/CS ?a  "97")
    (funcall kc+M/CS ?b  "98")
    (funcall kc+M/CS ?c  "99")
    (funcall kc+M/CS ?d "100")
    (funcall kc+M/CS ?e "101")
    (funcall kc+M/CS ?f "102")
    (funcall kc+M/CS ?g "103")
    (funcall kc+M/CS ?h "104")
    (funcall kc+M/CS ?i "105")
    (funcall kc+M/CS ?j "106")
    (funcall kc+M/CS ?k "107")
    (funcall kc+M/CS ?l "108")
    (funcall kc+M/CS ?m "109")
    (funcall kc+M/CS ?n "110")
    (funcall kc+M/CS ?o "111")
    (funcall kc+M/CS ?p "112")
    (funcall kc+M/CS ?q "113")
    (funcall kc+M/CS ?r "114")
    (funcall kc+M/CS ?s "115")
    (funcall kc+M/CS ?t "116")
    (funcall kc+M/CS ?u "117")
    (funcall kc+M/CS ?v "118")
    (funcall kc+M/CS ?w "119")
    (funcall kc+M/CS ?x "120")
    (funcall kc+M/CS ?y "121")
    (funcall kc+M/CS ?z "122")
    (funcall kc+M/C  ?{ "123")
    (funcall kc+M/C  ?| "124")
    (funcall kc+M/C  ?} "125")
    (funcall kc+M/C  ?~ "126")

    ;; old rosaterm
    (define-key map "\e[9;2^" [S-tab])
    (define-key map "\e[9;5^" [C-tab])
    (define-key map "\e[9;6^" [C-S-tab])
    (define-key map "\e\e[9;2^" [M-S-tab])
    (define-key map "\e\e[9;5^" [C-M-tab])
    (define-key map "\e\e[9;6^" [C-M-S-tab])
    (define-key map "\e[13;2^" [S-return])
    (define-key map "\e[13;5^" [C-return])
    (define-key map "\e[13;6^" [C-S-return])
    (define-key map "\e\e[13;2^" [M-S-return])
    (define-key map "\e\e[13;5^" [C-M-return])
    (define-key map "\e\e[13;6^" [C-M-S-return])
    (define-key map "\e[27;2^" [S-escape])
    (define-key map "\e[27;5^" [C-escape])
    (define-key map "\e[27;6^" [C-S-escape])
    (define-key map "\e\e[27;2^" [M-S-escape])
    (define-key map "\e\e[27;5^" [C-M-escape])
    (define-key map "\e\e[27;6^" [C-M-S-escape])
    (define-key map "\e[8;2^" [S-backspace])
    (define-key map "\e[8;6^" [C-S-backspace])
    (define-key map "\e\e[8;2^" [M-S-backspace])
    (define-key map "\e\e[8;6^" [C-M-S-backspace])
    (define-key map "\e[32;2^" [S-space])
    (define-key map "\e[32;6^" [C-S-space])
    (define-key map "\e\e[32;2^" [M-S-space])
    (define-key map "\e\e[32;6^" [C-M-S-space])

    (define-key map "\e[27;2;9~" [S-tab])
    (define-key map "\e[27;5;9~" [C-tab])
    (define-key map "\e[27;6;9~" [C-S-tab])
    (define-key map "\e\e[27;2;9~" [M-S-tab])
    (define-key map "\e\e[27;5;9~" [C-M-tab])
    (define-key map "\e\e[27;6;9~" [C-M-S-tab])
    (define-key map "\e[27;2;13~" [S-return])
    (define-key map "\e[27;5;13~" [C-return])
    (define-key map "\e[27;6;13~" [C-S-return])
    (define-key map "\e\e[27;2;13~" [M-S-return])
    (define-key map "\e\e[27;5;13~" [C-M-return])
    (define-key map "\e\e[27;6;13~" [C-M-S-return])
    (define-key map "\e[27;2;27~" [S-escape])
    (define-key map "\e[27;5;27~" [C-escape])
    (define-key map "\e[27;6;27~" [C-S-escape])
    (define-key map "\e\e[27;2;27~" [M-S-escape])
    (define-key map "\e\e[27;5;27~" [C-M-escape])
    (define-key map "\e\e[27;6;27~" [C-M-S-escape])
    (define-key map "\e[27;2;8~" [S-backspace])
    (define-key map "\e[27;6;8~" [C-S-backspace])
    (define-key map "\e\e[27;2;8~" [M-S-backspace])
    (define-key map "\e\e[27;6;8~" [C-M-S-backspace])
    (define-key map "\e[27;2;32~" [S-space])
    (define-key map "\e[27;6;32~" [C-S-space])
    (define-key map "\e\e[27;2;32~" [M-S-space])
    (define-key map "\e\e[27;6;32~" [C-M-S-space])

    map))

(defun rosaterm-register-keymap ()
  (let ((map (copy-keymap rosaterm-function-map))
        (default-map (if (boundp 'input-decode-map)
                         input-decode-map
                       function-key-map)))
    ;; Use inheritance to let the main keymap override those defaults.
    ;; This way we don't override terminfo-derived settings or settings
    ;; made in the .emacs file.
    (set-keymap-parent map (keymap-parent default-map))
    (set-keymap-parent default-map map)))

(defun terminal-init-rosaterm ()
  "Terminal initialization function for rosaterm."
  ;; Use the xterm color initialization code.

  (rosaterm-register-keymap)
  (xterm-register-default-colors)
  (tty-set-up-initial-frame-faces))

;;; rosaterm.el ends here
