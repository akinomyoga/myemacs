;;; cygwin.el --- support for the Cygwin terminal
;; Copyright (C) 2011-2012 K. Murase.

(defvar cygwin-function-map
  (let* ((map (make-sparse-keymap))
         (shift    33554432)
         (control  67108864)
         (meta    134217728)
         ;; (kf+ACMS (lambda (name number tail)
         ;;             (define-key map (concat "\M-[" number tail)        (vector (make-symbol name)))
         ;;             (define-key map (concat "\M-[" number ";2" tail)   (vector (make-symbol (concat "S-" name))))
         ;;             (define-key map (concat "\M-[" number ";3" tail)   (vector (make-symbol (concat "A-" name))))
         ;;             (define-key map (concat "\M-[" number ";4" tail)   (vector (make-symbol (concat "A-S-" name))))
         ;;             (define-key map (concat "\M-[" number ";5" tail)   (vector (make-symbol (concat "C-" name))))
         ;;             (define-key map (concat "\M-[" number ";6" tail)   (vector (make-symbol (concat "C-S-" name))))
         ;;             (define-key map (concat "\M-[" number ";7" tail)   (vector (make-symbol (concat "A-C-" name))))
         ;;             (define-key map (concat "\M-[" number ";8" tail)   (vector (make-symbol (concat "A-C-S-" name))))
         ;;             (define-key map (concat "\M-[" number tail)      (vector (make-symbol (concat "M-" name))))
         ;;             (define-key map (concat "\M-[" number ";2" tail) (vector (make-symbol (concat "M-S-" name))))
         ;;             (define-key map (concat "\M-[" number ";3" tail) (vector (make-symbol (concat "A-M-" name))))
         ;;             (define-key map (concat "\M-[" number ";4" tail) (vector (make-symbol (concat "A-M-S-" name))))
         ;;             (define-key map (concat "\M-[" number ";5" tail) (vector (make-symbol (concat "C-M-" name))))
         ;;             (define-key map (concat "\M-[" number ";6" tail) (vector (make-symbol (concat "C-M-S-" name))))
         ;;             (define-key map (concat "\M-[" number ";7" tail) (vector (make-symbol (concat "A-C-M-" name))))
         ;;             (define-key map (concat "\M-[" number ";8" tail) (vector (make-symbol (concat "A-C-M-S-" name))))
         ;;             ))
         ;; (kf-C/AMS (lambda (name number tail)
         ;;            (define-key map (concat "\e[" number tail)        (vector (make-symbol (concat "C-" name))))
         ;;            (define-key map (concat "\e[" number ";2" tail)   (vector (make-symbol (concat "C-S-" name))))
         ;;            (define-key map (concat "\e[" number ";3" tail)   (vector (make-symbol (concat "A-C-" name))))
         ;;            (define-key map (concat "\e[" number ";4" tail)   (vector (make-symbol (concat "A-C-S-" name))))
         ;;            (define-key map (concat "\e\e[" number tail)      (vector (make-symbol (concat "C-M-" name))))
         ;;            (define-key map (concat "\e\e[" number ";2" tail) (vector (make-symbol (concat "C-M-S-" name))))
         ;;            (define-key map (concat "\e\e[" number ";3" tail) (vector (make-symbol (concat "A-C-M-" name))))
         ;;            (define-key map (concat "\e\e[" number ";4" tail) (vector (make-symbol (concat "A-C-M-S-" name))))
         ;;            ))
         (kf+CMS (lambda (name number tail)
                       (define-key map (concat "\e[" number tail)        (vector (make-symbol name)))
                       (define-key map (concat "\e[" number ";2" tail)   (vector (make-symbol (concat "S-" name))))
                       (define-key map (concat "\e[" number ";5" tail)   (vector (make-symbol (concat "C-" name))))
                       (define-key map (concat "\e[" number ";6" tail)   (vector (make-symbol (concat "C-S-" name))))
                       (define-key map (concat "\e\e[" number tail)      (vector (make-symbol (concat "M-" name))))
                       (define-key map (concat "\e\e[" number ";2" tail) (vector (make-symbol (concat "M-S-" name))))
                       (define-key map (concat "\e\e[" number ";5" tail) (vector (make-symbol (concat "C-M-" name))))
                       (define-key map (concat "\e\e[" number ";6" tail) (vector (make-symbol (concat "C-M-S-" name))))
                       ))
         ;; (kc+M/C (lambda (ch number tail)
         ;;           (define-key map (concat "\e[" number ";5" tail)   (vector (+ control ch)))
         ;;           (define-key map (concat "\e\e[" number ";5" tail) (vector (+ control meta ch)))
         ;;           ))
         ;; (kc+M/CS (lambda (ch number tail)
         ;;            (define-key map (concat "\e[" number ";6" tail)   (vector (+ control shift ch)))
         ;;            (define-key map (concat "\e\e[" number ";6" tail) (vector (+ control shift meta ch)))
         ;;            ))
         (kf-C+MS (lambda (name number tail)
                    (define-key map (concat "\e[" number tail)        (vector (make-symbol (concat "C-" name))))
                    (define-key map (concat "\e[" number ";2" tail)   (vector (make-symbol (concat "C-S-" name))))
                    (define-key map (concat "\e\e[" number tail)      (vector (make-symbol (concat "C-M-" name))))
                    (define-key map (concat "\e\e[" number ";2" tail) (vector (make-symbol (concat "C-M-S-" name))))
                    ))
         )

    (funcall kf+CMS "up"     "1" "A")
    (funcall kf+CMS "down"   "1" "B")
    (funcall kf+CMS "right"  "1" "C")
    (funcall kf+CMS "left"   "1" "D")
    ;; (funcall kf+CMS "begin"   "1" "E")
    (funcall kf+CMS "home"   "1" "~")
    (funcall kf+CMS "insert" "2" "~")
    (funcall kf+CMS "delete" "3" "~")
    (funcall kf+CMS "end"    "4" "~")
    (funcall kf+CMS "prior"  "5" "~")
    (funcall kf+CMS "next"   "6" "~")

    (funcall kf+CMS "f1"  "11" "~")
    (funcall kf+CMS "f2"  "12" "~")
    (funcall kf+CMS "f3"  "13" "~")
    (funcall kf+CMS "f4"  "14" "~")
    (funcall kf+CMS "f5"  "15" "~")
    (funcall kf+CMS "f6"  "17" "~")
    (funcall kf+CMS "f7"  "18" "~")
    (funcall kf+CMS "f8"  "19" "~")
    (funcall kf+CMS "f9"  "20" "~")
    (funcall kf+CMS "f10" "21" "~")
    (funcall kf+CMS "f11" "23" "~")
    (funcall kf+CMS "f12" "24" "~")

    (funcall kf+CMS "f13" "25" "~")
    (funcall kf+CMS "f14" "26" "~")
    (funcall kf+CMS "f15" "28" "~")
    (funcall kf+CMS "f16" "29" "~")
    (funcall kf+CMS "f17" "30" "~")
    (funcall kf+CMS "f18" "31" "~")
    (funcall kf+CMS "f19" "32" "~")
    (funcall kf+CMS "f20" "33" "~")
    (funcall kf+CMS "f21" "23" "$")
    (funcall kf+CMS "f22" "24" "$")
    (funcall kf+CMS "f23" "25" "$")
    (funcall kf+CMS "f24" "26" "$")

    (funcall kf-C+MS "f1"  "11" "^")
    (funcall kf-C+MS "f2"  "12" "^")
    (funcall kf-C+MS "f3"  "13" "^")
    (funcall kf-C+MS "f4"  "14" "^")
    (funcall kf-C+MS "f5"  "15" "^")
    (funcall kf-C+MS "f6"  "17" "^")
    (funcall kf-C+MS "f7"  "18" "^")
    (funcall kf-C+MS "f8"  "19" "^")
    (funcall kf-C+MS "f9"  "20" "^")
    (funcall kf-C+MS "f10" "21" "^")
    (funcall kf-C+MS "f11" "23" "^")
    (funcall kf-C+MS "f12" "24" "^")

    (funcall kf-C+MS "f13" "25" "^")
    (funcall kf-C+MS "f14" "26" "^")
    (funcall kf-C+MS "f15" "28" "^")
    (funcall kf-C+MS "f16" "29" "^")
    (funcall kf-C+MS "f17" "21" "^")
    (funcall kf-C+MS "f18" "22" "^")
    (funcall kf-C+MS "f19" "23" "^")
    (funcall kf-C+MS "f20" "24" "^")
    (funcall kf-C+MS "f21" "23" "@")
    (funcall kf-C+MS "f22" "24" "@")
    (funcall kf-C+MS "f23" "25" "@")
    (funcall kf-C+MS "f24" "26" "@")

    map))

(defun cygwin-define-standard-colors ()
  "Register names of 16 standard cygwin colors, their numbers, and RGB values."
  ;; from xterm.el/xterm-standard-colors
  (tty-color-define "black"          0 '(#x0000 #x0000 #x0000))
  (tty-color-define "red"            1 '(#x8080 #x0000 #x0000))
  (tty-color-define "green"          2 '(#x0000 #x8080 #x0000))
  (tty-color-define "yellow"         3 '(#x8080 #x8080 #x0000))
  (tty-color-define "blue"           4 '(#x0000 #x0000 #x8080))
  (tty-color-define "magenta"        5 '(#x8080 #x0000 #x8080))
  (tty-color-define "cyan"           6 '(#x0000 #x8080 #x8080))
  (tty-color-define "white"          7 '(#xC0C0 #xC0C0 #xC0C0))
  (tty-color-define "brightblack"    8 '(#x7F7F #x7F7F #x7F7F))
  (tty-color-define "brightred"      9 '(#xFFFF #x0000 #x0000))
  (tty-color-define "brightgreen"   10 '(#x0000 #xFFFF #x0000))
  (tty-color-define "brightyellow"  11 '(#xFFFF #xFFFF #x0000))
  (tty-color-define "brightblue"    12 '(#x0000 #x0000 #xFFFF))
  (tty-color-define "brightmagenta" 13 '(#xFFFF #x0000 #xFFFF))
  (tty-color-define "brightcyan"    14 '(#x0000 #xFFFF #xFFFF))
  (tty-color-define "brightwhite"   15 '(#xFFFF #xFFFF #xFFFF)))

(defun cygwin-register-keymap ()
  (let ((map (copy-keymap cygwin-function-map))
        (default-map (if (boundp 'input-decode-map)
                         input-decode-map
                       function-key-map)))
    ;; Use inheritance to let the main keymap override those defaults.
    ;; This way we don't override terminfo-derived settings or settings
    ;; made in the .emacs file.
    (set-keymap-parent map (keymap-parent default-map))
    (set-keymap-parent default-map map)))

(defun terminal-init-cygwin ()
  "Terminal initialization function for cygwin."

  (cygwin-register-keymap)
  (cygwin-define-standard-colors)

  ;; The Cygwin terminal can't really display underlines.
  (tty-no-underline))

;;; cygwin.el ends here
